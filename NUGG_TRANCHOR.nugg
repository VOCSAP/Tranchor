<?xml version="1.0" encoding="utf-8"?>
<nugget name="TRANCHOR">
 <CLAS CLSNAME="ZCL_TRANCHOR" VERSION="1" LANGU="F" DESCRIPT="Tranchor" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_TRANCHOR" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_TRANCHOR" CMPNAME="MOT_DATA" VERSION="1" LANGU="F" DESCRIPT="Données" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="DATA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TRANCHOR" CMPNAME="MV_DATA_SIZE" VERSION="1" LANGU="F" DESCRIPT="Taille données" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="I" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TRANCHOR" CMPNAME="MV_INDEX" VERSION="1" LANGU="F" DESCRIPT="Index courant" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="I" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TRANCHOR" CMPNAME="MV_PACKAGE_SIZE" VERSION="1" LANGU="F" DESCRIPT="Taille paquet" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="I" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_TRANCHOR" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="F" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TRANCHOR" CMPNAME="CONSTRUCTOR" SCONAME="IT_DATA" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="INDEX TABLE"/>
   <parameter CLSNAME="ZCL_TRANCHOR" CMPNAME="CONSTRUCTOR" SCONAME="IV_PACKAGE_SIZE" VERSION="1" LANGU="F" DESCRIPT="Taille paquet" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I" PARVALUE="5000"/>
   <parameter CLSNAME="ZCL_TRANCHOR" CMPNAME="CONSTRUCTOR" SCONAME="IV_START_AT" VERSION="1" LANGU="F" DESCRIPT="Commencez à la position" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I" PARVALUE="1"/>
   <parameter CLSNAME="ZCL_TRANCHOR" CMPNAME="CONSTRUCTOR" SCONAME="IV_USING_REFERENCE" VERSION="1" LANGU="F" DESCRIPT="Utilisation référence" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <exception CLSNAME="ZCL_TRANCHOR" CMPNAME="CONSTRUCTOR" SCONAME="CX_SY_CREATE_DATA_ERROR" VERSION="1" LANGU="F" DESCRIPT="System-Exception Creating Data" MTDTYPE="2" EDITORDER="1 "/>
   <source>METHOD constructor.

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
    DATA :
      lo_cx_exception TYPE REF TO cx_sy_create_data_error.

***------------------------------------------------------------------***
**                          FIELD-SYMBOLS                             **
***------------------------------------------------------------------***
    FIELD-SYMBOLS :
      &lt;lfs_data&gt; TYPE INDEX TABLE.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

    IF iv_using_reference EQ abap_true.
      &quot; Utilisation par référence
      &quot;&quot;  --&gt; Récupération de la référence
      GET REFERENCE OF it_data INTO me-&gt;mot_data.

      &quot;&quot;  --&gt; Initialisation pointeur sur les données
      ASSIGN me-&gt;mot_data-&gt;* TO &lt;lfs_data&gt;.

    ELSE.
      TRY.
          &quot; Initialisation de la table de travail
          CREATE DATA me-&gt;mot_data LIKE it_data.

        CATCH cx_sy_create_data_error INTO lo_cx_exception.
          &quot; Erreur lors de la création de la table
          RAISE EXCEPTION TYPE cx_sy_create_data_error
            EXPORTING
              previous = lo_cx_exception.

      ENDTRY.

      &quot; Initialisation pointeur sur le contenu de la table
      ASSIGN me-&gt;mot_data-&gt;* TO &lt;lfs_data&gt;.
      IF sy-subrc EQ 0.
        &quot; Initialisation du contenu de la table
        &lt;lfs_data&gt;[] = it_data[].

      ENDIF.

    ENDIF.

    IF NOT &lt;lfs_data&gt; IS ASSIGNED.
      &quot; Erreur assignation pointeur
      &quot;&quot;  --&gt; Lève une exception
      RAISE EXCEPTION TYPE cx_sy_create_data_error.

    ENDIF.

    &quot; Initialisation taille données
    me-&gt;mv_data_size = lines( it_data ).

    IF iv_start_at IS SUPPLIED AND iv_start_at IS INITIAL.
      &quot; Initialisation position index sur la première ligne
      me-&gt;mv_index = 1.

    ELSE.
      &quot; Utilisation position index fournis
      me-&gt;mv_index = iv_start_at.

    ENDIF.

    IF iv_package_size IS SUPPLIED AND iv_package_size IS INITIAL.
      &quot; Taille paquet fournis mais nulle
      &quot;&quot;  --&gt; Initialisation taille de paquet à une valeur arbitraire
      me-&gt;mv_package_size = 5000.

    ELSE.
      &quot; Utilisation de la taille de paquet fournis en paramètre
      me-&gt;mv_package_size = iv_package_size.

    ENDIF.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TRANCHOR" CMPNAME="GET_NEXT" VERSION="1" LANGU="F" DESCRIPT="Récupération paquet suivant" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TRANCHOR" CMPNAME="GET_NEXT" SCONAME="ET_PACKAGE" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY TABLE"/>
   <source>METHOD get_next.

***------------------------------------------------------------------***
**                            VARIABLES                               **
***------------------------------------------------------------------***
    DATA :
      lv_index TYPE i.

***------------------------------------------------------------------***
**                          FIELD-SYMBOLS                             **
***------------------------------------------------------------------***
    FIELD-SYMBOLS :
      &lt;lfs_s_data&gt; TYPE any,
      &lt;lfs_t_data&gt; TYPE INDEX TABLE.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

    FREE : et_package.

    IF NOT me-&gt;mot_data IS BOUND.
      &quot; Pas de données à traiter
      &quot;&quot;  --&gt; Arrêt du traitement
      RETURN.

    ENDIF.

    &quot; Initialisation pointeur sur la table de données
    ASSIGN me-&gt;mot_data-&gt;* TO &lt;lfs_t_data&gt;.
    IF sy-subrc NE 0.
      &quot; Erreur assignation
      &quot;&quot;  --&gt; En cas d&apos;erreur et pour ne pas relancer indéfiniment le traitement
      &quot;&quot;      on libère la table de travail interne
      FREE : me-&gt;mot_data.
      RETURN.

    ENDIF.

    IF me-&gt;mv_data_size LE me-&gt;mv_package_size.
      &quot; Taille de la table inférieur à la taille de paquet
      &quot;&quot;  --&gt; Retourne toute la table
      et_package[] = &lt;lfs_t_data&gt;[].

      &quot;&quot;  --&gt; Initialise index plus grand que la taille de la table pour ne pas relancer le traitement
      me-&gt;mv_index = me-&gt;mv_data_size + 1.

      &quot;&quot;  --&gt; Arrêt du traitement
      RETURN.

    ENDIF.

    &quot; Réinitialisation de l&apos;index temporaire
    lv_index = 1.

    &quot; Extraction du paquet suivant (en reprennant à partir de l&apos;index précédent)
    LOOP AT &lt;lfs_t_data&gt; ASSIGNING &lt;lfs_s_data&gt;
                              FROM me-&gt;mv_index.

      IF lv_index GT me-&gt;mv_package_size.
        &quot; On a atteint la taille de paquet souhaité
        EXIT.

      ENDIF.

      &quot; Ajout de l&apos;entrée
      INSERT &lt;lfs_s_data&gt; INTO TABLE et_package.

      &quot; Incrémentation de l&apos;index local
      ADD 1 TO lv_index.

      &quot; Incrémentation de l&apos;index global
      ADD 1 TO me-&gt;mv_index.

    ENDLOOP.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TRANCHOR" CMPNAME="HAS_NEXT" VERSION="1" LANGU="F" DESCRIPT="Encore des paquets à traiter ?" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TRANCHOR" CMPNAME="HAS_NEXT" SCONAME="RV_HAS_NEXT" VERSION="1" LANGU="F" DESCRIPT="Encore ?" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG"/>
   <source>METHOD has_next.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

    CLEAR : rv_has_next.

    IF me-&gt;mot_data IS NOT BOUND.
      &quot; Prévois le cas où la référence n&apos;existe plus
      rv_has_next = abap_false.
      RETURN.

    ENDIF.

    IF me-&gt;mv_data_size GE me-&gt;mv_index.
      &quot; La fin n&apos;a pas été atteinte
      rv_has_next = abap_true.

    ENDIF.

  ENDMETHOD.</source>
  </method>
 </CLAS>
</nugget>
